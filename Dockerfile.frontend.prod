# Build stage
FROM node:22-slim AS builder

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    wget \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy package files first
COPY frontend/package*.json ./

# Copy frontend source code
COPY frontend/ .

# Create wait script
RUN echo '#!/bin/bash\n\
echo "Waiting for backend..."\n\
until curl -f http://backend:8000/health; do\n\
    echo "Backend not ready - sleeping"\n\
    sleep 5\n\
done\n\
\n\
echo "Backend is ready - continuing build"' > /usr/local/bin/wait-for-backend.sh

# Make wait script executable
RUN chmod +x /usr/local/bin/wait-for-backend.sh

# Install dependencies with legacy peer deps
RUN npm install 

# Wait for backend and then build the application
RUN /usr/local/bin/wait-for-backend.sh || echo "Skipping wait in build stage" && \
    npm run build-only && \
    npm run build:widgetdocker && \
    npm run build:webclient && \
    if [ ! -f dist/index.html ]; then \
        echo "<!DOCTYPE html><html><head><meta charset='utf-8'><title>ChatterMate</title><link rel='icon' href='/favicon.ico'></head><body><div id='app'></div><script type='module' src='/src/main.ts'></script></body></html>" > dist/index.html; \
    fi

# Production stage
FROM nginx:alpine

# Remove default nginx static assets
RUN rm -rf /usr/share/nginx/html/*

# Copy the built files to nginx
COPY --from=builder /app/dist/ /usr/share/nginx/html/

# Copy wait script
COPY --from=builder /usr/local/bin/wait-for-backend.sh /usr/local/bin/wait-for-backend.sh

# Copy nginx configuration
COPY frontend/nginx.conf /etc/nginx/conf.d/default.conf

# Expose port
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=3s \
    CMD wget --quiet --tries=1 --spider http://localhost:80/ || exit 1

# Start nginx with wait script
CMD ["/bin/sh", "-c", "/usr/local/bin/wait-for-backend.sh && nginx -g 'daemon off;'"] 